#ifndef GEOGRAPHYOBJ_H
#define GEOGRAPHYOBJ_H

#include <JSystem/J3D/J3DModel.h>
#include <JSystem/JKernel/JKRHeap.h>
#include <JSystem/JGeometry/Vec.h>

#include "JSystem/JSupport/JSUList.h"
#include "Kameda/MotorManager.h"
#include "Kaneshige/Course/CrsData.h"
#include "Kaneshige/Course/CrsGround.h"
#include "Osako/shadowModel.h"
#include "Sato/AnmController.h"
#include "Sato/ItemObj.h"
#include "Sato/ObjCollision.h"
#include "Sato/stMath.h"

// TODO: Remove Forward declarations
class ObjColBase; // ObjCollision.h

class ItemColReaction
{
public:
    ItemColReaction() {}
    ~ItemColReaction() {}

    void init();
    void setFlg(u32 flgId, u8 flgVal);
    u32 tstFlg(u32 flgId);

private:
    u8 mFlags[16];
};

struct GeoAnmTableEntry {
    u32 _0; // unused?
    const char *fileName;
};

class GeoObjSupervisor
{
public:
    GeoObjSupervisor() : mLink(this), mLink2(this) {} // 0x801ba468

    // Vtable 0x0
    virtual ~GeoObjSupervisor() {}   // 0x801ba3b4
    virtual void reset() = 0;        // 0x0    
    virtual void calc() = 0;         // 0x0
    virtual void load() {}           // 0x801bcfa4
    virtual void thunderDownAll() {} // 0x801bcfa8
    virtual void createModel(JKRSolidHeap *, u32);

private:
    JSULink<GeoObjSupervisor> mLink;
    JSULink<GeoObjSupervisor> mLink2;
};

// TODO: replace void with correct return types
class GeographyObj
{ // Autogenerated
public:
    GeographyObj(const CrsData::SObject &);                                                     // 0x8022937c
    GeographyObj(u32);                                                                          // 0x80229450
    void setDefaultItemReaction();                                                              // 0x80229508
    void calc_norm();                                                                           // 0x802295f0
    void update_norm();                                                                         // 0x80229630
    void loadShadowModel(J3DModelData *, u32);                                                  // 0x8022972c
    void getAssignedModelZdir(JGeometry::TVec3f *);                                             // UNUSED / INLINED
    void getAssignedModelXYZdir(JGeometry::TVec3f *, JGeometry::TVec3f *, JGeometry::TVec3f *); // 0x80229838
    void getAssignedModelMatrix(Mtx);                                                           // 0x80229968
    void resetObject();                                                                         // 0x80229bcc
    bool IsHitKart(const JGeometry::TVec3f &, f32, JGeometry::TVec3f *);                        // 0x80229df4
    bool IsHitObject(const JGeometry::TVec3f &, ObjColBase *);                                  // 0x80229f98
    void setIsHitKartFlg(int);                                                                  // 0x8022a074
    void clrIsHitKartSoundFlg(int);                                                             // 0x8022a0c4
    bool tstUserFlg1(int kart_index) const;                                                     // 0x8022a0ec
    void clrUserFlg1(int);                                                                      // 0x8022a190
    void setUserFlg1(int);                                                                      // 0x8022a230
    f32 getHitSoundDegree();                                                                    // 0x8022a2d0
    void createMultiBoundsPtrAll(u8);                                                           // 0x8022a314
    void initSingleBound();                                                                     // UNUSED / INLINED
    void calcBoundsGlPos();                                                                     // 0x8022a420
    void createBoundsSphere(f32, f32);                                                          // 0x8022a57c
    bool createMultiBoundsSphere(u8, f32, f32);                                                 // 0x8022a66c
    void createBoundsCylinder(J3DModelData *, f32, f32);                                        // 0x8022a6fc
    void createBoundsCylinder(f32, f32, f32);                                                   // 0x8022a81c
    bool createMultiBoundsCylinder(const u8, J3DModelData *, f32, f32);                         // 0x8022a934
    void createBoundsCube(J3DModelData *);                                                      // 0x8022aa04
    bool setColObjPos(const JGeometry::TVec3f &, const u8);                                     // 0x8022ab20
    stRandom *getGeoRnd();                                                                      // 0x8022ac14
    void moveShadowModel();                                                                     // 0x8022ac38
    void createSoundMgr();                                                                      // 0x8022acec
    f32 getColRadius();                                                                         // UNUSED / INLINED
    f32 getColScaleRadius();                                                                    // 0x8022ad44
    f32 getAxisMaxScale();                                                                      // 0x8022adb4
    void lockMdl();                                                                             // 0x8022ae58
    void getSRTMtx(Mtx m);                                                                      // 0x8022ae88
    void setBoundScaleAll();                                                                    // 0x8022aef0
    f32 getAllBoundDepth();                                                                     // 0x8022af54
    void setObjData(const CrsData::SObject &, bool);                                            // 0x8022af94

    // Inline/Unused
    void findVtxPosMaxY(J3DModelData *, JGeometry::TVec3f &, JGeometry::TVec3f &);
    void newSingleObjColSphere(f32, f32);
    void newSingleObjColSphere(J3DModelData *);
    void newSingleObjColCylinder(J3DModelData *, f32, f32);
    void newSingleObjColCylinder(f32, f32, f32);
    void createMultiBoundsSphere(u8, J3DModelData *);
    void createMultiBoundsCylinder(u8, f32, f32, f32);
    void setLODBias();

    void setItemColReaction(u8 p1, u8 p2) { mReaction.setFlg(p1, p2); }

    bool IsPathMove() const { return mObjData->pathID != 0xffff; }

    template<class T>
    static T *New(CrsData::SObject &object) { return new T(object); }
    template<class T>
    static T *NewS(CrsData::SObject &object) { return new T(object); }

    void NewAnmCtrl() {
        if (mAnmCtrl == nullptr) {
            mAnmCtrl = new AnmController();
        }
    }

    ShadowModel *getShadowModel() const { return mShadowMdl; }
    GameAudio::ObjectSoundMgr *getSoundMgr() { return mSoundMgr; }
    AnmController *getAnmCtrl() const { return mAnmCtrl; }

    ObjColBase *getBounds(u8 idx) { return mBounds[idx]; }
    void setBounds(ObjColBase *bounds, u8 idx) { mBounds[idx] = bounds; } 

    void getVelocity(JGeometry::TVec3f *vel) const { *vel = mVel; }
    void getPosition(JGeometry::TVec3f *pos) const { *pos = mPos; }
    void clrObjFlagCheckGeoHitting() { mGeoObjFlag &= ~1; }
    void clrObjFlagCheckItemHitting() { mGeoObjFlag &= ~2; }
    void clrObjFlagHidding() { mGeoObjFlag &= ~0x20; }
    void clrObjFlagLODBias() { mObjFlag &= ~0x100; }
    
    void clrCheckKartHitFlag(int kartId) { mCheckKartHitFlags &= ~(1 << kartId); }
    void clrAllCheckKartHitFlag() { mCheckKartHitFlags = 0; }
    void clrAllIsHitKartFlg() { mIsHitKartFlags = 0; }

    void setObjFlagCheckItemHitting() { mGeoObjFlag |= 2; }    
    void setObjFlagSimpleDraw() { mObjFlag |= 1; }
    void setObjFlagMainResource() { mObjFlag |= 2; }
    void setObjFlagNorm() { mObjFlag |= 4; }
    void setObjFlagShadow() { mObjFlag |= 8; }
    void setObjFlagNoCollision() { mObjFlag |= 0x80; }
    void setObjFlagLODBias() { mObjFlag |= 0x100; }
    void setObjFlagHidding() { mGeoObjFlag |= 0x20; }

    void setAllCheckKartHitFlag() { mCheckKartHitFlags = 0xffffffff; }

    bool tstItemHitting() const { return mGeoObjFlag & 0x4; }
    bool tstObjFlagSimpleDraw() const { return mObjFlag & 1; }
    bool tstObjFlagNorm() const { return mObjFlag & 4; }
    bool tstObjFlagShadow() const { return mObjFlag & 8; }
    bool tstObjFlagHidding() const { return mGeoObjFlag & 0x20; }

    bool tstIsHitKartFlg(int kartNo) const { return (mIsHitKartFlags & (1 << kartNo)) != 0; }
    bool tstHitKartSoundFlg(int kartNo) const { return (mIsHitKartSoundFlg & (1 << kartNo)) != 0; }
    
    ItemObj *getColItemObj() const { return mColItemObj; }
    u32 getKind() const { return mKind; }
    ItemColReaction &getItemReaction() { return mReaction; }
    const u8 &getAllBoundsNum() const { return mBoundsNum; }

    void hideAllShadow() {
        if (mShadowMdl) {
            mShadowMdl->clrVisibleAll();
        }
    }

    void showShadow() {
        if (mShadowMdl) {
            mShadowMdl->setVisibleAll();
        }
    }

    bool isBigItemKind() const { // fabricated, likely wrong name
        bool ret = false;
        switch (mKind) {
        case 0xd4a:
        case 0xe0d:
        case 0xe78:
        case 0xe7f:
        case 0xfa1:
        case 0xfa2:
        case 0xfa3:
        case 0xfa6:
        case 0xfa7:
        case 0x1197:
        case 0x1389:
        case 0x13ee:
            ret = true;
            break;
        }
        return ret;
    }

    // Vtable
    virtual ~GeographyObj() {}                                                                      // 8
    virtual void loadmodel(J3DModelData *modelData) {                                               // C
        mModel.setModelData(modelData);
        createColModel(modelData);
    }                                                
    virtual void loadAnimation() {}                                                                 // 10
    virtual ShadowModel::ShadowKind getShadowKind() const { return ShadowModel::cShadowKind_Geo; }  // 14
    virtual void createModel(JKRSolidHeap *heap, u32 p2)                                            // 18
    {  
        if(!tstObjFlagSimpleDraw())
            mModel.createModel(heap, p2, 0x60000);
    }                                            
    virtual void configAnimationMode() {}                                                           // 1C
    virtual void createShadowModel(JKRSolidHeap *heap, u32);                                        // 20
    virtual void initByKind() {}                                                                    // 24
    virtual void reset() { resetObject(); }                                                         // 28
    virtual void calc() = 0;                                                                        // 2C
    virtual void update();                                                                          // 30
    virtual void viewCalc(u32);                                                                     // 34
    virtual void simpleDraw(u32);                                                                   // 38
    virtual void setCurrentViewNo(u32);                                                             // 3C
    virtual u32 getMotorType() const { return MotorManager::MotorType_1; }                          // 40, probably an Enum
    virtual u32 getSoundID() const;                                                                 // 44, probably a define
    virtual const char *getBmdFileName() { return nullptr; }                                        // 48
    virtual const char *getShadowBmdFileName() { return nullptr; }                                  // 4C
    virtual u32 getJ3DModelDataTevStageNum() const { return 0x20000; }                              // 50
    virtual void createColModel(J3DModelData *);                                                    // 54
    virtual void createBoundsSphere(J3DModelData *);                                                // 58
    virtual GeoAnmTableEntry *getAnmTbl() { return nullptr; }                                                   // 5C
    virtual u16 getSizeAnmTbl() { return 0; }                                                       // 60
    virtual GeoObjSupervisor *getSupervisor() { return nullptr; }                                   // 64
    virtual void getItemThrowDirPow(JGeometry::TVec3f *, f32 *, const ItemObj &);                   // 68
    virtual void getKartThrowDirPow(JGeometry::TVec3f *, f32 *, int);                               // 6C
    virtual void makeSharedDL() {                                                                   // 70
        if (!tstObjFlagSimpleDraw()) {
            mModel.makeSharedDL();
        }
    }                                                                  
    virtual void doKartColCallBack(int);                                                            // 74
    virtual void initClassCreateNum() { }                                                           // 78
    virtual void setModelMatrixAndScale();                                                          // 7C

    const JGeometry::TVec3f &getBoundsGlPos(u32 num)
    {
#line 217
        JUT_MINMAX_ASSERT(0, num, mBoundsNum);

        return mBoundsGlPos[num];
    }

public:
    JGeometry::TVec3f mPos;               // 04
    JGeometry::TPos3f mRotMtx;            // 10
    JGeometry::TVec3f mScale;             // 40
    JGeometry::TVec3f mVel;               // 4C
    int _58;                              // 58, some sort of ID
    ExModel mModel;                       // 5C
    const CrsData::SObject *mObjData;     // E8
    u32 mGeoObjFlag;                      // EC
    u32 mCheckKartHitFlags;               // F0
    u32 mIsHitKartFlags;                  // F4
    u16 mIsHitKartSoundFlg;               // F8
    u16 mIsHitKartSoundPlayedFlg;         // FA
    JSULink<GeographyObj> mObjLink;       // FC
    int mKind;                            // 10C
    u8 _110[0x114 - 0x110];               //
    ItemObj *mColItemObj;                 // 114
    ShadowModel *mShadowMdl;              // 118
    u16 mObjFlag;                         // 11C
    AnmController *mAnmCtrl;              // 120
    ItemColReaction mReaction;            // 124
    ObjColBase **mBounds;                 // 134
    JGeometry::TVec3f *mColObjPos;        // 138
    JGeometry::TVec3f *mBoundsGlPos;      // 13c
    u8 mBoundsNum;                        // 140
    u8 mDefaultBound;                     // 141
    GameAudio::ObjectSoundMgr *mSoundMgr; // 144
    u8 mUserFlg1;                         // 148
}; // Size: 0x14c

class ExGeographyObj : public GeographyObj {
public:
    ExGeographyObj(const CrsData::SObject &object) : GeographyObj(object), _15c(0.0f), mExLinks(this) {
        _150.zero();
    }

    ~ExGeographyObj() {}
    // TODO: check return types
    virtual bool Search_Bound(const JGeometry::TVec3f &) { return false; }
    virtual bool Search_BoundRadius(const JGeometry::TVec3f &, f32) { return false; }
    virtual void Search(const JGeometry::TVec3f &, const JGeometry::TVec3f &) {}
    virtual void AddVel(const JGeometry::TVec3f &, const JGeometry::TVec3f &) {}
    virtual void Search_Wall(const JGeometry::TVec3f &, f32) { }
    virtual void draw(Mtx) {}
    virtual f32 getMaxHeight() const { return 0.0f; }
    virtual void lockDisplayList() {}

    template<class T>
    static T *ExNew(CrsData::SObject &object) { return new T(object); }

    ExObjColBase *mExBounds;
    JGeometry::TVec3f _150;
    f32 _15c;
    JSULink<GeographyObj> mExLinks; // 160
};

// TODO: Move to Shiraiwa?

class TMapObjHioNode : public GeographyObj
{
public:
    TMapObjHioNode(u32 id) : GeographyObj(id) {}
    TMapObjHioNode(const CrsData::SObject &rObj) : GeographyObj(rObj) {}
    virtual ~TMapObjHioNode();
};

#endif
