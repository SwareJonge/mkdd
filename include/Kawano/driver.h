#ifndef DRIVER_H
#define DRIVER_H

#include "Inagaki/GameSoundMgr.h"

#include "Kaneshige/ExModel.h"
#include "Kaneshige/KartInfo.h"
#include "Sato/ItemObj.h"

class J3DAnmTransform; // TODO: JSystem
class KartLoader;

class DriverDataChild
{
    static int mInitCounter;
    static f32 mDriverDataDefault[91][14];

    f32 data[91][14];

public:
    DriverDataChild();
    virtual ~DriverDataChild();

}; // Size: 0x180

class DriverData : public JKRDisposer
{
    u8 _18[0x7c - 0x18];

public:
    DriverData(); // Auto Inlined
    virtual ~DriverData();
    static DriverData *create();

    static DriverDataChild msDriverData[14];
    static DriverData *mspDriverData;
}; // Size: 0x7c

class DriversAnimator // TODO
{
public:
    ~DriversAnimator();
};

class NullAnimator // TODO
{
protected:
    f32 mCurrentValue;
public:
    virtual void start();
    virtual void stop();
    virtual void reset();
    virtual void update();
};

class DriverModel : public ExModel
{ // Autogenerated
public:
    enum StateEnum {};

    DriverModel(KartLoader *, int, u16, bool, int);
    void convCharIDToDataID(ECharID);
    void init_ik(int);
    void init(int);
    void initMtxCalc();
    void initAnmTrans_BossPakkun(J3DAnmTransform *);
    void InitMpaMtxCalc(StateEnum, J3DAnmTransform *, J3DAnmTransform *, J3DAnmTransform *, J3DAnmTransform *);
    void restart(int);
    void setDriveAnm(f32);
    void setTandemAnm(f32, f32);
    void Start1ShotAnm_base(DriversAnimator *, StateEnum);
    void StartAnimation2();
    void StartAnimation(StateEnum);
    void updateFrame();
    void updateFrame_base(DriversAnimator *, StateEnum);
    void updateSetFrame();
    void updateLoad_Animation();
    void updateLoad();
    void updateCheckRenew_Animation();
    void updateCheckRenew();
    void updateBlendCount();
    void updateSetBlendWeight_GetBlendTime(StateEnum);
    void updateSetBlendWeight();
    void setItem(ItemObj *);
    void resetItem();
    void getMtxP_HandR();
    void getMtxP_HandR2();
    void getMtxP(int);
    void getAnmTransformPtr(int);
    void IsAnmResInMRAM(int);
    void IsAnmSoundResInMRAM(int);
    
    //void msAnmBlendList;
    static u8 msNext_mState_HokanDamages[2];

    // Virtual Table
    virtual void update(u16);                           // override
    virtual bool createModel(JKRSolidHeap *, u32, u32); // override
    virtual void setCurrentViewNo(u32);                 // override
    virtual ~DriverModel();

    // Inline/Unused
    void InitMpaMtxCalcThrow(J3DAnmTransform *);
    void setShakeAnm(StateEnum, f32);
    void setShakeAnm2(StateEnum, f32, int, int);
    void setShakeAnm3(StateEnum, f32);
    void setTandemAnm(f32);
    void StartAnimationWC(StateEnum);
    void setCommon1ShotAnm_Single(f32, int);
    void setCommon1ShotAnm(f32);
    void setCommon1ShotAnm_Single2(int, f32, int);
    void setCommon1ShotAnm2(int, f32);
    void setCommonAnm_Base(int, f32, int);
    void setCommonAnm2(int, f32);
    void setCommonAnm(f32);
    void setCommonAnm_Blend(f32, int);
    void Change_next_mState(StateEnum);
    void updateSetFrame_base(StateEnum);
    void updateLoadCommand(int);
    void updateLoadCommand_Sound(int);
    void updateLoad_Sound();
    void updateCheckRenew_Sound();
    void BlendValue(f32);
    void updateBlendCount_Func1(u8, u8);
    void updateBlendCount_Func2(u8);
    void updateSetBlendWeight_Func1(u8, u8);
    void updateSetBlendWeight_FuncABCD(f32, f32, f32, f32);
    void updateSetBlendWeight_mStateThrow();
    void update_mIsSpeakBCA();
    void setLODLevel(int);
    void IsARAMDMAFinished();
    static void *msAnmSabunList;

    GameAudio::CharacterSoundMgr* getGameAudioCharacterSoundMgr() { return mCharSoundMgr; }

    int IsChange();
    int IsChangeBack();
    int IsChangeFront();

public:
    u8 _8c[0xfc - 0x8c];
    f32 _fc[11];
    u8 _128[0x6c0 - 0x128];
private:
    GameAudio::CharacterSoundMgr *mCharSoundMgr; // _6C0    //0d1728
    u8 _6C4[0x7a8 - 0x6c4];
}; // Size: 0x7a8


#endif // DRIVER_H
